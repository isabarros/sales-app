require 'test_helper'

class OrganizationReportsControllerTest < ActionController::TestCase
  setup do
    @organization = Organization.create!(name: "Test Organization")
    @other_organization = Organization.create!(name: "Other Organization")

    # Create Users for each SalesRep
    users = 3.times.map { User.create!(name: FFaker::Name.name, email: FFaker::Internet.email) }

    # Create SalesReps for the organization, each associated with a User
    @sales_reps = users.each_with_index.map do |user, index|
      SalesRep.create!(user: user, organization: @organization)
    end

    product_a = Product.create!(name: "Product A", price: 50)
    product_b = Product.create!(name: "Product B", price: 20)
    product_c = Product.create!(name: "Product C", price: 10)

    # Create Sales and Items associated with sales reps in the organization
    @sales_reps.each do |sales_rep|
      sale = Sale.create!(sales_rep: sales_rep)

      # Create Items for each Sale with associated Products
      Item.create!(sale: sale, product: product_a, quantity: 3)
      Item.create!(sale: sale, product: product_b, quantity: 2)
      Item.create!(sale: sale, product: product_c, quantity: 1)
    end

    # Create sales and items for a different organization to ensure isolation
    other_user = User.create!(name: FFaker::Name.name, email: FFaker::Internet.email)
    other_sales_rep = SalesRep.create!(user: other_user, organization: @other_organization)
    other_sale = Sale.create!(sales_rep: other_sales_rep)
    Item.create!(sale: other_sale, product: Product.create!(name: "Other Product", price: 100), quantity: 5)
  end

  test "should assign total number of Sales Reps for the organization" do
    get :show, params: { id: @organization.id }

    assert_response :success
    json_response = JSON.parse(response.body)
    assert_equal 3, json_response['total_sales_reps']
  end

  test "should assign total number of Sales made by the sales reps" do
    get :show, params: { id: @organization.id }

    assert_response :success
    json_response = JSON.parse(response.body)
    assert_equal 3, json_response['total_sales']
  end

  test "should assign total revenue generated by all sales in the organization" do
    get :show, params: { id: @organization.id }
    assert_response :success

    # Total revenue calculation:
    # Product A (3 * 50) + Product B (2 * 20) + Product C (1 * 10) per sale
    expected_revenue = (3 * ((3 * 50) + (2 * 20) + (1 * 10))).to_f
    json_response = JSON.parse(response.body)
    assert_equal expected_revenue, json_response['total_revenue']
  end

  test "should assign top 5 products based on quantity sold" do
    get :show, params: { id: @organization.id }
    assert_response :success

    json_response = JSON.parse(response.body)
    top_products = json_response['top_products']
    assert_operator top_products.size, :<=, 5
    assert_equal "Product A", top_products.first["name"]
    assert_equal 9, top_products.first["total_quantity_sold"] # Product A sold 3 units per sale across 3 sales
  end
end
